{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./js/Spell.js","webpack:///./js/entry.js","webpack:///./js/game.js","webpack:///./js/shape_finder.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AACA,iBAAiB,wBAAwB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,oEAAK,E;;;;;;;;;;;;ACVpB;AAAA;AAA0B;;AAE1B;AACA;AACA;AACA;;AAEA,qBAAqB,6CAAI;AACzB;AACA,CAAC;;;;;;;;;;;;;;ACTD;AAAA;AAAyC;;AAEzC;AACA;AACA;AACA,2B;;AAEA;AACA,+BAA+B,qDAAW;;AAE1C;;AAEA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEe,mEAAI,E;;;;;;;;;;;;AC/CnB;AAAA;AAA4B;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oCAAoC,8CAAK;AACzC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB;AAChB;;AAEA;AACA;AACA;;AAEA,yBAAyB,6BAA6B;AACtD;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,OAAO;;AAE1B;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oCAAoC,MAAM;AAC1C;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,S;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,4D;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEe,0EAAW,E","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./js/entry.js\");\n","class Spell {\n    constructor({points, position, shape}) {\n        this.shape = shape;\n        this.position = position;\n        this.points = points;\n        this.life = 1;\n        this.decay = 0.1;\n    }\n}\n\nexport default Spell;","import Game from './game';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    let paperCanvas = document.getElementById('paperCanvas');\n    let mainCanvas = document.getElementById('mainCanvas');\n    paper.setup(paperCanvas);\n\n    const game = new Game(mainCanvas, paperCanvas);\n    game.start();\n});\n\n","import shapeFinder from './shape_finder';\n\nclass Game {\n    constructor(canvas, paper) {\n        this.canvas = canvas;\n        this.paper = paper; \n\n        this.mouseTool = new Tool();\n        this.spellFinder = new shapeFinder(this.mouseTool, mainCanvas);\n\n        // this.drawBg = this.drawBg.bind(this);\n\n        document.addEventListener('mouseup', () => {\n            this.spell = this.spellFinder.currentSpell;\n        });\n    }\n\n    start() {\n        setInterval(this.draw, 1000);\n    }\n\n    drawBg() {\n        const ctx = this.canvas.getContext('2d');\n\n        ctx.beginPath();\n        ctx.rect(canvas.width / 2, canvas.height / 2, 20, 10);\n        ctx.fillStyle = \"#C1B8B6\";\n        ctx.fill();\n        ctx.closePath();\n        ctx.stroke();\n    }\n\n    drawSpells() {\n        if (!this.spell) {\n            return\n        }\n\n        // this.spell.draw();\n        // this.spell.decreaseLife();\n    }\n\n    draw() {\n        this.drawBg();\n        this.drawSpells();\n    }\n}\n\nexport default Game;","import Spell from './Spell';\n\nclass ShapeFinder {\n    constructor(tool, canvas) {\n        this.tool = tool;\n        this.canvas = canvas;\n        this.prevPoint = {};\n        this.prevVector = null;\n        this.numCorners = 0;\n        this.numPoints = 0;\n        this.pointsArr = [];\n        this.anglesArr = [];\n        this.prevPoint = null;\n        this.currPoint = null;\n        this.shape = null;\n        this.path;\n        this.position;\n        this.currentSpell;\n        this.determineShape = this.determineShape.bind(this);\n        this.resetPath = this.resetPath.bind(this);\n        this.drawSimplifiedShape = this.drawSimplifiedShape.bind(this);\n\n        tool.onMouseDown = toolEvent => {\n            this.path = new Path();\n            this.path.opacity = 0.5;\n            this.path.strokeColor = 'blue';\n            this.path.strokeWidth = '5';\n\n            this.prevPoint = toolEvent.point;\n            this.pointsArr.push(toolEvent.point);\n            this.position = this.path.position;\n            this.numPoints++;\n        }\n\n        tool.onMouseDrag = toolEvent => {\n            this.path.add(toolEvent.point);\n            this.currPoint = toolEvent.point;\n            this.numPoints++;\n            this.checkDeltaChange();\n        }\n\n        tool.onMouseUp = toolEvent => {\n            this.drawShapeOnCanvas();\n            this.resetPath();\n        }\n    }\n\n    drawShapeOnCanvas() {\n        this.pointsArr = this.removeRedundantPoints();\n\n        this.determineShape(this.pointsArr);\n\n        if ( this.shape ) {\n            this.drawSimplifiedShape(this.pointsArr);\n            const spellAttr = {\n                position: this.position,\n                points: this.pointsArr,\n                shape: this.shape,\n            }\n\n            this.currentSpell = new Spell(spellAttr);\n        }\n    }\n\n    determineShape(allPoints) {\n        // debugger\n        switch (allPoints.length) {\n            case 1: \n                this.shape = \"LINE\";\n                break;\n            case 2:\n                this.shape = \"LINE\";\n                break;\n            case 3: \n                this.shape = \"TRIANGLE\";\n                break;\n            case 4:\n                this.shape = 'SQUARE';\n                break;\n            case 5:\n                this.shape = 'STAR/PENTAGON';\n                break;\n            default:\n                this.shape = null\n        }\n\n        console.log(this.shape);\n    }\n\n    resetPath() {\n        this.path.remove();\n        this.numCorners = 0;\n        this.anglesArr = [];\n        this.pointsArr = [];\n        this.prevPoint = {};\n        this.prevVector = null;\n        this.shape = null;\n    }\n\n    checkIfCircle() {\n\n    }\n\n    checkDeltaChange() {\n        const currVector = this.createVector(this.prevPoint, this.currPoint);\n\n        if ( this.prevVector ) {\n            const directionChange = this._inDifferentDirection(this.prevVector, currVector);\n\n            if ( directionChange ) {\n                const tooClose = this._cornersAreClose(this.currPoint);\n\n                if ( !tooClose ) {\n                    this.pointsArr.push(this.currPoint);\n                    this.anglesArr.push(currVector.angle);\n                    this.numCorners++;\n                    this.numPoints = 0;\n                } \n            }\n        }\n\n        this.prevVector = currVector;\n        this.prevPoint = this.currPoint;\n    }\n\n    createVector(point1, point2) {\n        const dx = point2.x - point1.x;\n        const dy = point2.y - point1.y;\n        const radians = Math.atan2(dy, dx);\n        const angle = radians * (180 / Math.PI);\n        const length = Math.sqrt(Math.pow(dx,2) + Math.pow(dy,2));\n        const direction = this._findDirection(angle);\n\n        return { dx, dy, angle, direction, length };\n    }\n\n    removeRedundantPoints() {\n        const startPoint = this.pointsArr[0];\n        const finalPoints = [startPoint];\n\n        for (let idx = 1; idx < this.pointsArr.length; idx++) {\n            const currPoint = this.pointsArr[idx];\n            const prevPoint = finalPoints[finalPoints.length - 1];\n            let nextPoint;\n\n            if ( idx === this.pointsArr.length - 1) {\n                nextPoint = startPoint;\n            } else {\n                nextPoint = this.pointsArr[idx + 1];\n            }\n\n            const currVector = this.createVector(prevPoint, currPoint);\n            const nextVector = this.createVector(prevPoint, nextPoint);\n\n            if ( this.compareVectors(currVector, nextVector) ) {\n                continue;\n            } else {\n                finalPoints.push(currPoint);\n            }\n        }\n\n        return finalPoints;\n    }\n\n    drawSimplifiedShape(allPoints) {\n        const ctx = this.canvas.getContext('2d');\n        const start = allPoints.shift();\n\n        ctx.beginPath();\n        ctx.lineWidth = \"5\";\n        ctx.strokeColor = 'green';\n        ctx.moveTo(start.x, start.y);\n\n        allPoints.forEach( (point, idx) => {\n            const { x, y } = point;\n\n            if ( idx !== allPoints.length - 1 ) {\n                ctx.lineTo(x, y);\n            } else {\n                ctx.lineTo(x, y);\n                ctx.lineTo(start.x, start.y);\n            }\n        });\n\n        ctx.closePath()\n        ctx.fillStyle = 'red';\n        ctx.fill();\n        ctx.stroke();\n    }\n\n    // _movingSlowly(vector) {\n    //     const speedMargin = 0.4;\n    //     const speed = vector.length / this.numPoints;\n    //     // console.log(`Speed: ${speed} length/points`);\n    //     this.speed = speed;\n    //     if ( speed <= speedMargin ) {\n    //         return true;\n    //     } else {\n    //         return false;\n    //     }\n    // }\n\n    // _isLargeChange(oldVector, newVector) {\n    //     const avgDy = (newVector.dy + oldVector.dy) / 2;\n    //     const avgDx = (newVector.dx + oldVector.dx) / 2;\n    //     const dyDiff = Math.abs(newVector.dy - avgDy);\n    //     const dxDiff = Math.abs(newVector.dx - avgDx);\n    //     const totalDiff = dxDiff + dyDiff;\n    //     const changeMargin = dxDiff === 0 || dyDiff === 0 ? 1 : 1.5;\n\n\n    //     console.log( totalDiff );\n    //     if (totalDiff > changeMargin) {\n    //         return true;\n    //     } else {\n    //         return false;\n    //     }\n    // }\n\n    compareVectors(vectorA, vectorB) {\n        const ratioA = vectorA.dx / vectorA.dy\n        const ratioB = vectorB.dx / vectorB.dy\n        \n        if ( ratioA === ratioB ) {\n            return true;\n        } \n        \n        const errorRatio = 0.2;\n        const multipleA = Math.abs(vectorA.dx * Math.pow(ratioA, -1));\n        const multipleB = Math.abs(vectorB.dx * Math.pow(ratioB, -1));\n        const biggerMultiple = multipleA > multipleB ? multipleA : multipleB;\n        const errorMargin = errorRatio * biggerMultiple;\n        const bigVectorAx = ratioA * biggerMultiple;\n        const bigVectorBx = ratioB * biggerMultiple;\n\n        if (Math.abs(Math.abs(bigVectorBx) - Math.abs(bigVectorAx)) <= errorMargin ) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    // compareDirections(directionA, directionB) {\n    //     const directions = ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW'];\n\n    //     if ( directionA === directionB) {\n    //         return true;\n    //     }\n\n    //     let prevDirection, nextDirection;\n    //     const currIndex = directions.indexOf(directionA); \n    //     if ( currIndex === 0 ) {\n    //         prevDirection = 'NW';\n    //         nextDirection = 'NE';\n    //     } else if ( currIndex === directions.length - 1) {\n    //         prevDirection = 'W';\n    //         nextDirection = 'N';\n    //     } else {\n    //         prevDirection = directions[currIndex - 1];\n    //         nextDirection = directions[currIndex + 1];\n    //     }\n\n    //     if ( directionB === prevDirection || directionB === nextDirection ) {\n    //         return true;\n    //     } else {\n    //         return false\n    //     }\n    // }\n\n    _inDifferentDirection(vectorA, vectorB) {\n        let different = false;\n        const errorMargin = 5;\n\n        if ( vectorA.direction !== vectorB.direction ) {\n            const angleA = vectorA.angle;\n            const angleB = vectorB.angle;\n\n            if ( Math.abs(angleB - angleA) > errorMargin ) {\n                different = true;\n            }\n        }\n\n        return different;\n    }\n\n    _cornersAreClose(pointA) {\n        let distanceMargin = 40;\n        let tooClose = false;\n\n        this.pointsArr.forEach( (pointB, idx) => {\n            const differenceVector = this.createVector(pointB, pointA);\n            if ( idx === 0 ) {\n                distanceMargin *= 2;\n            }\n            if ( differenceVector.length <= distanceMargin ) {\n                tooClose = true;\n            }\n        });\n\n        return tooClose;\n    }\n\n    _findDirection(angle) {\n        let direction = '';\n        const relativeAngle = angle >= 0 ? angle % 360 : angle + 360;\n\n        if ( relativeAngle >= 337.5 || relativeAngle <= 22.5 ) {\n            direction = 'N';\n        } else if ( relativeAngle >= 22.5 && relativeAngle <= 67.5) {\n            direction = 'NE';\n        } else if ( relativeAngle >= 67.5 && relativeAngle <= 112.5) {\n            direction = 'E';\n        } else if ( relativeAngle >= 112.5 && relativeAngle <= 157.5) {\n            direction = 'SE';\n        } else if ( relativeAngle >= 157.5 && relativeAngle <= 202.5) {\n            direction = 'S';\n        } else if ( relativeAngle >= 202.5 && relativeAngle <= 247.5) {\n            direction = 'SW';\n        } else if ( relativeAngle >= 247.5 && relativeAngle <= 292.5) {\n            direction = 'W';\n        } else if ( relativeAngle >= 292.5 && relativeAngle <= 337.5) {\n            direction = 'NW';\n        }\n        \n        return direction\n    }\n}\n\nexport default ShapeFinder;"],"sourceRoot":""}